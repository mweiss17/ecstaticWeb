{
  "name": "grunt-mocha-istanbul",
  "version": "2.4.0",
  "description": "Almost config-free Istanbul code coverage reporter for Mocha usage in Grunt",
  "peerDependencies": {
    "grunt": "0.4.x",
    "mocha": ">=1.x.x",
    "istanbul": "0.x.x"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/pocesar/grunt-mocha-istanbul.git"
  },
  "keywords": [
    "grunt",
    "gruntplugin",
    "mocha",
    "istanbul",
    "test",
    "coverage",
    "coveralls"
  ],
  "main": "tasks/index.js",
  "license": "MIT",
  "readme": "[![Dependency Status](https://david-dm.org/pocesar/grunt-mocha-istanbul.png?theme=shields.io)](https://david-dm.org/pocesar/grunt-mocha-istanbul)\r\n\r\n[![NPM](https://nodei.co/npm/grunt-mocha-istanbul.png?downloads=true&stars=true)](https://nodei.co/npm/grunt-mocha-istanbul/)\r\n\r\ngrunt mocha istanbul task\r\n==============\r\n\r\n[Mocha](http://visionmedia.github.com/mocha/) reporter to generate coverage report of [istanbul](http://gotwarlost.github.com/istanbul/) instrumented code, for grunt\r\nThis doesn't force you to use PhantomJS, or instrument code for server or client-side.\r\n\r\nInstall\r\n==============\r\n\r\n1. Install it using `npm install grunt-mocha-istanbul --save-dev`\r\n2. It needs `mocha`, `grunt` and `istanbul` to be installed locally on your project (aka, having them in your devDependencies)\r\n3. Call inside Gruntfile.js `grunt.loadNpmTasks('grunt-mocha-istanbul')`\r\n\r\nChanges from 1.x\r\n==============\r\n\r\nSince Istanbul has 2 versions (ES5 and ES6/harmony), it's up to you to install the desired version of Istanbul,\r\nit's now defined as a a peer dependency.\r\n\r\nIntroduced new task `istanbul_check_coverage` to enable coverage checking on more than one test run. See below for example.\r\n\r\nChanges from 0.2.0\r\n==============\r\n\r\n* `mocha_istanbul_check` was removed and became part of the options under the `check` object\r\n\r\n\r\nOptions\r\n==============\r\n\r\nMost of the options that you pass to mocha is available in `options`:\r\n\r\n```js\r\n\r\nmodule.exports = function(grunt){\r\n    grunt.initConfig({\r\n        mocha_istanbul: {\r\n            coverage: {\r\n                src: 'test', // a folder works nicely\r\n                options: {\r\n                    mask: '*.spec.js'\r\n                }\r\n            },\r\n            coverageSpecial: {\r\n                src: ['testSpecial/*/*.js', 'testUnique/*/*.js'], // specifying file patterns works as well\r\n                options: {\r\n                    coverageFolder: 'coverageSpecial',\r\n                    mask: '*.spec.js',\r\n                    mochaOptions: ['--harmony','--async-only'], // any extra options\r\n                    istanbulOptions: ['--harmony','--handle-sigint']\r\n                }\r\n            },\r\n            coveralls: {\r\n                src: ['test', 'testSpecial', 'testUnique'], // multiple folders also works\r\n                options: {\r\n                    coverage:true, // this will make the grunt.event.on('coverage') event listener to be triggered\r\n                    check: {\r\n                        lines: 75,\r\n                        statements: 75\r\n                    },\r\n                    root: './lib', // define where the cover task should consider the root of libraries that are covered by tests\r\n                    reportFormats: ['cobertura','lcovonly']\r\n                }\r\n            }\r\n        },\r\n        istanbul_check_coverage: {\r\n          default: {\r\n            options: {\r\n              coverageFolder: 'coverage*', // will check both coverage folders and merge the coverage results\r\n              check: {\r\n                lines: 80,\r\n                statements: 80\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n    });\r\n\r\n    grunt.event.on('coverage', function(lcovFileContents, done){\r\n        // Check below on the section \"The coverage event\"\r\n        done();\r\n    });\r\n\r\n    grunt.loadNpmTasks('grunt-mocha-istanbul');\r\n\r\n    grunt.registerTask('coveralls', ['mocha_istanbul:coveralls']);\r\n    grunt.registerTask('coverage', ['mocha_istanbul:coverage']);\r\n};\r\n```\r\n\r\nIf there's a `mocha.opts` file inside the first `src` folder or file defined, it will warn if you are overwriting any options.\r\n\r\nCoverage is written to `coverage` folder by default, in the same level as the `Gruntfile.js`\r\n\r\nThe `check` will fail the build if the thresholds are not met. It's a great possibility for CI-builds.\r\n\r\nOptions\r\n==============\r\n\r\n##### _Array_ `options.require` (default: `[]`)\r\n##### _Boolean_ `options.ui` (default: `false`)\r\n##### _Array_ `options.globals` (default: `[]`)\r\n##### _String_ `options.reporter` (default: `false`)\r\n##### _Number_ `options.timeout` (default: `false`)\r\n##### _Boolean_ `options.slow` (default: `false`)\r\n##### _String_ `options.grep` (default: `false`)\r\n##### _Boolean_ `options.recursive` (default: `false`)\r\n##### _Boolean_ `options.noColors` (default: `false`)\r\n\r\nMochas parameters, check [http://visionmedia.github.io/mocha/#usage]\r\n\r\n##### _Array_ `options.mochaOptions` (default: `false`)\r\n\r\nAn array of strings, any additional mocha parameters, manually set. Eg.: `['--harmony']`\r\n\r\n##### _Array_ `options.istanbulOptions` (default: `false`)\r\n\r\nAn array of strings, any additional istanbul parameters, manually set. Eg.: `['--harmony', '--handle-sigint']`\r\n\r\n##### _String_ `options.scriptPath` (default: `istanbulPath`)\r\n\r\nAllows to override the default istanbul path to use another coverage library, such as [ibrik](https://www.npmjs.com/package/ibrik). Need to set the full path to the bin (script that accepts stdin arguments) and is compatible with `cover`.\r\n\r\n##### _Boolean_ `options.coverage` (default: `false`)\r\n\r\nSetting this to true makes the task emit a grunt event `coverage`, that will contain the lcov data from\r\nthe file, containing the following callback `function(lcovcontent, done)`, and **you must manually call\r\n`done()` when you are finished, else the grunt task will HANG, and won't allow any other tasks to finish**. See more information below\r\n\r\n##### _Boolean_ `options.dryRun` (default: `false`)\r\n\r\nSpits out the command line that would be called, just to make sure everything is alright\r\n\r\n##### _Array_ `options.excludes` (default: `false`)\r\n\r\nSetting this exclude files from coverage report, check `istanbul help cover`. You may use glob matching in here.\r\n\r\n##### _String_ `options.mask` (default: `false`)\r\n\r\nThe mask for the tests to be ran. By default, mocha will execute the `test` folder and all test files. Will override any files specified in `src` and instead use the mask on those files' folders.\r\n\r\n##### _Boolean_ `options.quiet` (default: `false`)\r\n\r\nSuppresses the output from Mocha and Istanbul\r\n\r\n##### _String_ `options.coverageFolder` (default: `coverage`)\r\n\r\nName of the output of the coverage folder\r\n\r\n##### _Array_ `options.reportFormats` (default: `['lcov']`)\r\n\r\nName of report formats. You can specify more than one. If you intend to use the `coverage` option to\r\n`true` or do any checks, you must add: `['yourformat','lcovonly']`, since it's needed for the `lcov.info`\r\nfile to be created.\r\n\r\n[Supported formats](https://github.com/gotwarlost/istanbul#the-report-command):\r\n\r\n```\r\n    html - produces a bunch of HTML files with annotated source code\r\n    lcovonly - produces an lcov.info file\r\n    lcov - produces html + lcov files. This is the default format\r\n    cobertura - produces a cobertura-coverage.xml file for easy Hudson integration\r\n    text-summary - produces a compact text summary of coverage, typically to console\r\n    text - produces a detailed text table with coverage for all files\r\n    teamcity - produces service messages to report code coverage to TeamCity\r\n```\r\n\r\n##### _String_ `options.root` (default: `false`)\r\n\r\nThe root path to look for files to instrument, defaults to `.`. Can help to exclude directories that are not\r\npart of the code whose coverage should be checked.\r\n\r\n##### _String_ `options.print` (default: `false`)\r\n\r\nThe type of report to print to console. Can be one of 'summary', 'detail', 'both', or 'none'. By\r\ndefault, Istanbul will print the 'summary' report.\r\n\r\n##### _Number_ `options.check.statements` (default: `false`)\r\n\r\nNumber of statements threshold to consider the coverage valid\r\n\r\n##### _Number_ `options.check.lines` (default: `false`)\r\n\r\nNumber of lines threshold to consider the coverage valid\r\n\r\n##### _Number_ `options.check.branches` (default: `false`)\r\n\r\nNumber of branches threshold to consider the coverage valid\r\n\r\n##### _Number_ `options.check.functions` (default: `false`)\r\n\r\nNumber of functions threshold to consider the coverage valid\r\n\r\nThe coverage event\r\n==============\r\n\r\nWhen you set the option `coverage` to `true`, you'll receive the `coverage/lcov.info` file contents:\r\n\r\n```js\r\ngrunt.event.on('coverage', function(lcov, done){\r\n    console.log(lcov);\r\n    done(); // or done(false); in case of error\r\n});\r\n```\r\n\r\nThis is mainly useful so you can send it to, for example, coveralls (using [coveralls](https://github.com/cainus/node-coveralls)):\r\n\r\n```js\r\ngrunt.event.on('coverage', function(lcov, done){\r\n    require('coveralls').handleInput(lcov, function(err){\r\n        if (err) {\r\n            return done(err);\r\n        }\r\n        done();\r\n    });\r\n});\r\n```\r\n\r\nThis way, Travis-CI can send the Istanbul generated LCOV directly to Coveralls.io website in this example, but you could\r\ncreate any transform for Jenkins, TeamCity, Hudson, etc.\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pocesar/grunt-mocha-istanbul/issues"
  },
  "_id": "grunt-mocha-istanbul@2.4.0",
  "dist": {
    "shasum": "2b190daccec9019c991c8e69c8f9d035f987addb"
  },
  "_from": "grunt-mocha-istanbul@",
  "_resolved": "https://registry.npmjs.org/grunt-mocha-istanbul/-/grunt-mocha-istanbul-2.4.0.tgz"
}
